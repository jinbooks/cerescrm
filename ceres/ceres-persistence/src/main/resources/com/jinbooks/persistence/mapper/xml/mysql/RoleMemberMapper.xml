<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jinbooks.persistence.mapper.RoleMemberMapper">

    <sql id="where_statement">
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
        <if test="roleName != null and roleName != ''">
            and rolename = #{roleName}
        </if>
    </sql>

    <select id="memberInRole" parameterType="com.jinbooks.entity.permissions.dto.RoleMemberPageDto" resultType="RoleMember">
        select distinct
        rm.id as id,
        rm.type as type,
        r.id as roleid,
        r.role_name,
        concat(u.display_name,'(',u.username,')') membername,
        rm.created_date
        from
        jbx_userinfo u,
        jbx_roles r,
        jbx_role_member rm
        where  rm.book_id = #{Dto.bookId}
        and rm.type in( 'USER','USER-DYNAMIC')
        and rm.role_id = r.id
        and rm.member_id = u.id
        and u.deleted = 'n'
        and r.deleted = 'n'
        <if test="Dto.roleId != null and Dto.roleId != ''">
            and rm.role_id = #{Dto.roleId}
            and r.id = #{Dto.roleId}
        </if>
        <if test="Dto.roleName != null and Dto.roleName != ''">
            and r.role_name like CONCAT('%', #{Dto.roleName}, '%')
        </if>
        <if test="Dto.memberName != null and Dto.memberName != ''">
            and (
            u.username like CONCAT('%', #{Dto.memberName}, '%')
            or u.display_name like CONCAT ('%', #{Dto.memberName}, '%')
            )
        </if>
    </select>


    <select id="memberNotInRole" parameterType="com.jinbooks.entity.permissions.dto.RoleMemberPageDto" resultType="RoleMember">
        select distinct
        u.id,
        u.username,
        u.display_name ,
        u.created_by
        from
        jbx_userinfo u
        where
        u.id not in(
        select rm.member_id
        from jbx_roles r,jbx_role_member rm
        where r.deleted = 'n'
        <if test="Dto.roleId != null and Dto.roleId != ''">
            and rm.role_id = #{Dto.roleId}
            and r.id = #{Dto.roleId}
        </if>
        <if test="Dto.roleName != null and Dto.roleName != ''">
            and r.role_name = #{Dto.roleName}
        </if>
        and rm.type in( 'USER','USER-DYNAMIC')
        and rm.role_id = r.id
        )
        <if test="Dto.username != null and Dto.username != ''">
            and u.username = #{Dto.username}
        </if>
        <if test="Dto.displayName != null and Dto.displayName != ''">
          and u.display_name like CONCAT ('%', #{Dto.displayName}, '%')
        </if>
    </select>

    <select id="rolesNoMember" parameterType="com.jinbooks.entity.permissions.dto.RoleMemberPageDto" resultType="Roles">
        select distinct
        r.*
        from
        jbx_roles r
        where
        r.id not in(
        select
        rm.role_id
        from jbx_role_member rm,jbx_userinfo u
        where rm.member_id = u.id
        <if test="Dto.username != null and Dto.username != ''">
            and u.username = #{Dto.username}
        </if>
        <if test="Dto.memberId != null and Dto.memberId != ''">
            and rm.member_id = #{Dto.memberId}
        </if>
        and u.deleted = 'n'
        )
        <if test="Dto.roleName != null and Dto.roleName != ''">
            and r.role_name like CONCAT('%', #{Dto.roleName}, '%')
        </if>
        and r.deleted = 'n'
    </select>


    <update id="addDynamicRoleMember" parameterType="Roles">
        insert into jbx_role_member(
        id,
        roleid,
        memberid,
        type,
        book_id
        )
        select
        concat('${id}_',u.id) id,
        '${id}' roleid,
        u.id memberid,
        'USER-DYNAMIC' type,
        '${bookId}' book_id
        from jbx_userinfo u
        where not exists(
        select 1 from jbx_role_member rm
        where rm.roleid=#{id}
        and rm.memberid=u.id
        and rm.type='USER-DYNAMIC'
        )
        <if test="filters != null and filters != ''">
            and (${filters})
        </if>
        and u.deleted = 'n'
    </update>

    <delete id="deleteDynamicRoleMember" parameterType="Roles">
        delete gm from jbx_role_member gm
        where type = 'user-dynamic'
        and gm.roleid=#{id}
        and not exists(
        select 1
        from jbx_userinfo u
        where u.deleted = 'n'
        and u.id=gm.memberid
        <if test="filters != null and filters != ''">
            and (${filters})
        </if>
        )
    </delete>

    <select id="queryMemberByRoleId" parameterType="string" resultType="UserInfo">
        select distinct r.roleId,
                        r.roleName,
                        u.id,
                        u.username,
                        u.usertype,

                        u.displayname,
                        u.nickname,
                       
                        u.mobile,
                        u.email,
                        rm.createddate,
                        u.status
        from jbx_userinfo u,
             jbx_roles r,
             jbx_role_member rm
        where 1 = 1
          and rm.roleid = #{value}
          and g.id = #{value}
          and rm.type in ('USER', 'USER-DYNAMIC')
          and rm.roleid = r.id
          and rm.memberid = u.id
        and u.deleted = 'n'
        and r.deleted = 'n'
    </select>


    <delete id="deleteByRoleId" parameterType="string">
        delete
        from jbx_role_member
        where rm.roleid = #{value}
          and rolecoe != 'ROLE_ALL_USER'
    </delete>

</mapper>
